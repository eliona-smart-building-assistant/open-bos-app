// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbgen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Alarm is an object representing the database table.
type Alarm struct {
	ID                int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ElionaAttributeID int64  `boil:"eliona_attribute_id" json:"eliona_attribute_id" toml:"eliona_attribute_id" yaml:"eliona_attribute_id"`
	ElionaAlarmID     int32  `boil:"eliona_alarm_id" json:"eliona_alarm_id" toml:"eliona_alarm_id" yaml:"eliona_alarm_id"`
	OpenbosAlarmID    string `boil:"openbos_alarm_id" json:"openbos_alarm_id" toml:"openbos_alarm_id" yaml:"openbos_alarm_id"`

	R *alarmR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L alarmL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlarmColumns = struct {
	ID                string
	ElionaAttributeID string
	ElionaAlarmID     string
	OpenbosAlarmID    string
}{
	ID:                "id",
	ElionaAttributeID: "eliona_attribute_id",
	ElionaAlarmID:     "eliona_alarm_id",
	OpenbosAlarmID:    "openbos_alarm_id",
}

var AlarmTableColumns = struct {
	ID                string
	ElionaAttributeID string
	ElionaAlarmID     string
	OpenbosAlarmID    string
}{
	ID:                "alarm.id",
	ElionaAttributeID: "alarm.eliona_attribute_id",
	ElionaAlarmID:     "alarm.eliona_alarm_id",
	OpenbosAlarmID:    "alarm.openbos_alarm_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint32 struct{ field string }

func (w whereHelperint32) EQ(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint32) NEQ(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint32) LT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint32) LTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint32) GT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint32) GTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint32) IN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint32) NIN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AlarmWhere = struct {
	ID                whereHelperint64
	ElionaAttributeID whereHelperint64
	ElionaAlarmID     whereHelperint32
	OpenbosAlarmID    whereHelperstring
}{
	ID:                whereHelperint64{field: "\"open_bos\".\"alarm\".\"id\""},
	ElionaAttributeID: whereHelperint64{field: "\"open_bos\".\"alarm\".\"eliona_attribute_id\""},
	ElionaAlarmID:     whereHelperint32{field: "\"open_bos\".\"alarm\".\"eliona_alarm_id\""},
	OpenbosAlarmID:    whereHelperstring{field: "\"open_bos\".\"alarm\".\"openbos_alarm_id\""},
}

// AlarmRels is where relationship names are stored.
var AlarmRels = struct {
	ElionaAttribute string
}{
	ElionaAttribute: "ElionaAttribute",
}

// alarmR is where relationships are stored.
type alarmR struct {
	ElionaAttribute *ElionaAttribute `boil:"ElionaAttribute" json:"ElionaAttribute" toml:"ElionaAttribute" yaml:"ElionaAttribute"`
}

// NewStruct creates a new relationship struct
func (*alarmR) NewStruct() *alarmR {
	return &alarmR{}
}

func (r *alarmR) GetElionaAttribute() *ElionaAttribute {
	if r == nil {
		return nil
	}
	return r.ElionaAttribute
}

// alarmL is where Load methods for each relationship are stored.
type alarmL struct{}

var (
	alarmAllColumns            = []string{"id", "eliona_attribute_id", "eliona_alarm_id", "openbos_alarm_id"}
	alarmColumnsWithoutDefault = []string{"eliona_alarm_id", "openbos_alarm_id"}
	alarmColumnsWithDefault    = []string{"id", "eliona_attribute_id"}
	alarmPrimaryKeyColumns     = []string{"id"}
	alarmGeneratedColumns      = []string{}
)

type (
	// AlarmSlice is an alias for a slice of pointers to Alarm.
	// This should almost always be used instead of []Alarm.
	AlarmSlice []*Alarm
	// AlarmHook is the signature for custom Alarm hook methods
	AlarmHook func(context.Context, boil.ContextExecutor, *Alarm) error

	alarmQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	alarmType                 = reflect.TypeOf(&Alarm{})
	alarmMapping              = queries.MakeStructMapping(alarmType)
	alarmPrimaryKeyMapping, _ = queries.BindMapping(alarmType, alarmMapping, alarmPrimaryKeyColumns)
	alarmInsertCacheMut       sync.RWMutex
	alarmInsertCache          = make(map[string]insertCache)
	alarmUpdateCacheMut       sync.RWMutex
	alarmUpdateCache          = make(map[string]updateCache)
	alarmUpsertCacheMut       sync.RWMutex
	alarmUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var alarmAfterSelectMu sync.Mutex
var alarmAfterSelectHooks []AlarmHook

var alarmBeforeInsertMu sync.Mutex
var alarmBeforeInsertHooks []AlarmHook
var alarmAfterInsertMu sync.Mutex
var alarmAfterInsertHooks []AlarmHook

var alarmBeforeUpdateMu sync.Mutex
var alarmBeforeUpdateHooks []AlarmHook
var alarmAfterUpdateMu sync.Mutex
var alarmAfterUpdateHooks []AlarmHook

var alarmBeforeDeleteMu sync.Mutex
var alarmBeforeDeleteHooks []AlarmHook
var alarmAfterDeleteMu sync.Mutex
var alarmAfterDeleteHooks []AlarmHook

var alarmBeforeUpsertMu sync.Mutex
var alarmBeforeUpsertHooks []AlarmHook
var alarmAfterUpsertMu sync.Mutex
var alarmAfterUpsertHooks []AlarmHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Alarm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Alarm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Alarm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Alarm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Alarm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Alarm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Alarm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Alarm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Alarm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAlarmHook registers your hook function for all future operations.
func AddAlarmHook(hookPoint boil.HookPoint, alarmHook AlarmHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		alarmAfterSelectMu.Lock()
		alarmAfterSelectHooks = append(alarmAfterSelectHooks, alarmHook)
		alarmAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		alarmBeforeInsertMu.Lock()
		alarmBeforeInsertHooks = append(alarmBeforeInsertHooks, alarmHook)
		alarmBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		alarmAfterInsertMu.Lock()
		alarmAfterInsertHooks = append(alarmAfterInsertHooks, alarmHook)
		alarmAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		alarmBeforeUpdateMu.Lock()
		alarmBeforeUpdateHooks = append(alarmBeforeUpdateHooks, alarmHook)
		alarmBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		alarmAfterUpdateMu.Lock()
		alarmAfterUpdateHooks = append(alarmAfterUpdateHooks, alarmHook)
		alarmAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		alarmBeforeDeleteMu.Lock()
		alarmBeforeDeleteHooks = append(alarmBeforeDeleteHooks, alarmHook)
		alarmBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		alarmAfterDeleteMu.Lock()
		alarmAfterDeleteHooks = append(alarmAfterDeleteHooks, alarmHook)
		alarmAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		alarmBeforeUpsertMu.Lock()
		alarmBeforeUpsertHooks = append(alarmBeforeUpsertHooks, alarmHook)
		alarmBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		alarmAfterUpsertMu.Lock()
		alarmAfterUpsertHooks = append(alarmAfterUpsertHooks, alarmHook)
		alarmAfterUpsertMu.Unlock()
	}
}

// OneG returns a single alarm record from the query using the global executor.
func (q alarmQuery) OneG(ctx context.Context) (*Alarm, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single alarm record from the query.
func (q alarmQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Alarm, error) {
	o := &Alarm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbgen: failed to execute a one query for alarm")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Alarm records from the query using the global executor.
func (q alarmQuery) AllG(ctx context.Context) (AlarmSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Alarm records from the query.
func (q alarmQuery) All(ctx context.Context, exec boil.ContextExecutor) (AlarmSlice, error) {
	var o []*Alarm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbgen: failed to assign all query results to Alarm slice")
	}

	if len(alarmAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Alarm records in the query using the global executor
func (q alarmQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Alarm records in the query.
func (q alarmQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to count alarm rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q alarmQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q alarmQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbgen: failed to check if alarm exists")
	}

	return count > 0, nil
}

// ElionaAttribute pointed to by the foreign key.
func (o *Alarm) ElionaAttribute(mods ...qm.QueryMod) elionaAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ElionaAttributeID),
	}

	queryMods = append(queryMods, mods...)

	return ElionaAttributes(queryMods...)
}

// LoadElionaAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (alarmL) LoadElionaAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlarm interface{}, mods queries.Applicator) error {
	var slice []*Alarm
	var object *Alarm

	if singular {
		var ok bool
		object, ok = maybeAlarm.(*Alarm)
		if !ok {
			object = new(Alarm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAlarm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAlarm))
			}
		}
	} else {
		s, ok := maybeAlarm.(*[]*Alarm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAlarm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAlarm))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &alarmR{}
		}
		args[object.ElionaAttributeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &alarmR{}
			}

			args[obj.ElionaAttributeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`open_bos.eliona_attribute`),
		qm.WhereIn(`open_bos.eliona_attribute.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ElionaAttribute")
	}

	var resultSlice []*ElionaAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ElionaAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for eliona_attribute")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for eliona_attribute")
	}

	if len(elionaAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ElionaAttribute = foreign
		if foreign.R == nil {
			foreign.R = &elionaAttributeR{}
		}
		foreign.R.Alarms = append(foreign.R.Alarms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ElionaAttributeID == foreign.ID {
				local.R.ElionaAttribute = foreign
				if foreign.R == nil {
					foreign.R = &elionaAttributeR{}
				}
				foreign.R.Alarms = append(foreign.R.Alarms, local)
				break
			}
		}
	}

	return nil
}

// SetElionaAttributeG of the alarm to the related item.
// Sets o.R.ElionaAttribute to related.
// Adds o to related.R.Alarms.
// Uses the global database handle.
func (o *Alarm) SetElionaAttributeG(ctx context.Context, insert bool, related *ElionaAttribute) error {
	return o.SetElionaAttribute(ctx, boil.GetContextDB(), insert, related)
}

// SetElionaAttribute of the alarm to the related item.
// Sets o.R.ElionaAttribute to related.
// Adds o to related.R.Alarms.
func (o *Alarm) SetElionaAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ElionaAttribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"open_bos\".\"alarm\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"eliona_attribute_id"}),
		strmangle.WhereClause("\"", "\"", 2, alarmPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ElionaAttributeID = related.ID
	if o.R == nil {
		o.R = &alarmR{
			ElionaAttribute: related,
		}
	} else {
		o.R.ElionaAttribute = related
	}

	if related.R == nil {
		related.R = &elionaAttributeR{
			Alarms: AlarmSlice{o},
		}
	} else {
		related.R.Alarms = append(related.R.Alarms, o)
	}

	return nil
}

// Alarms retrieves all the records using an executor.
func Alarms(mods ...qm.QueryMod) alarmQuery {
	mods = append(mods, qm.From("\"open_bos\".\"alarm\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"open_bos\".\"alarm\".*"})
	}

	return alarmQuery{q}
}

// FindAlarmG retrieves a single record by ID.
func FindAlarmG(ctx context.Context, iD int64, selectCols ...string) (*Alarm, error) {
	return FindAlarm(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAlarm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlarm(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Alarm, error) {
	alarmObj := &Alarm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"open_bos\".\"alarm\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, alarmObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbgen: unable to select from alarm")
	}

	if err = alarmObj.doAfterSelectHooks(ctx, exec); err != nil {
		return alarmObj, err
	}

	return alarmObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Alarm) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Alarm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbgen: no alarm provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(alarmColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	alarmInsertCacheMut.RLock()
	cache, cached := alarmInsertCache[key]
	alarmInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			alarmAllColumns,
			alarmColumnsWithDefault,
			alarmColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(alarmType, alarmMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(alarmType, alarmMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"open_bos\".\"alarm\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"open_bos\".\"alarm\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbgen: unable to insert into alarm")
	}

	if !cached {
		alarmInsertCacheMut.Lock()
		alarmInsertCache[key] = cache
		alarmInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Alarm record using the global executor.
// See Update for more documentation.
func (o *Alarm) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Alarm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Alarm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	alarmUpdateCacheMut.RLock()
	cache, cached := alarmUpdateCache[key]
	alarmUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			alarmAllColumns,
			alarmPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbgen: unable to update alarm, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"open_bos\".\"alarm\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, alarmPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(alarmType, alarmMapping, append(wl, alarmPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update alarm row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by update for alarm")
	}

	if !cached {
		alarmUpdateCacheMut.Lock()
		alarmUpdateCache[key] = cache
		alarmUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q alarmQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q alarmQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update all for alarm")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to retrieve rows affected for alarm")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AlarmSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlarmSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbgen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alarmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"open_bos\".\"alarm\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, alarmPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update all in alarm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to retrieve rows affected all in update all alarm")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Alarm) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Alarm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbgen: no alarm provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(alarmColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	alarmUpsertCacheMut.RLock()
	cache, cached := alarmUpsertCache[key]
	alarmUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			alarmAllColumns,
			alarmColumnsWithDefault,
			alarmColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			alarmAllColumns,
			alarmPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbgen: unable to upsert alarm, could not build update column list")
		}

		ret := strmangle.SetComplement(alarmAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(alarmPrimaryKeyColumns) == 0 {
				return errors.New("dbgen: unable to upsert alarm, could not build conflict column list")
			}

			conflict = make([]string, len(alarmPrimaryKeyColumns))
			copy(conflict, alarmPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"open_bos\".\"alarm\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(alarmType, alarmMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(alarmType, alarmMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbgen: unable to upsert alarm")
	}

	if !cached {
		alarmUpsertCacheMut.Lock()
		alarmUpsertCache[key] = cache
		alarmUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Alarm record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Alarm) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Alarm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Alarm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbgen: no Alarm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), alarmPrimaryKeyMapping)
	sql := "DELETE FROM \"open_bos\".\"alarm\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete from alarm")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by delete for alarm")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q alarmQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q alarmQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbgen: no alarmQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete all from alarm")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by deleteall for alarm")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AlarmSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlarmSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(alarmBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alarmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"open_bos\".\"alarm\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, alarmPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete all from alarm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by deleteall for alarm")
	}

	if len(alarmAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Alarm) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbgen: no Alarm provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Alarm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAlarm(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlarmSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbgen: empty AlarmSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlarmSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlarmSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alarmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"open_bos\".\"alarm\".* FROM \"open_bos\".\"alarm\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, alarmPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbgen: unable to reload all in AlarmSlice")
	}

	*o = slice

	return nil
}

// AlarmExistsG checks if the Alarm row exists.
func AlarmExistsG(ctx context.Context, iD int64) (bool, error) {
	return AlarmExists(ctx, boil.GetContextDB(), iD)
}

// AlarmExists checks if the Alarm row exists.
func AlarmExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"open_bos\".\"alarm\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbgen: unable to check if alarm exists")
	}

	return exists, nil
}

// Exists checks if the Alarm row exists.
func (o *Alarm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AlarmExists(ctx, exec, o.ID)
}
