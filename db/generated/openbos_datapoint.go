// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbgen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OpenbosDatapoint is an object representing the database table.
type OpenbosDatapoint struct {
	ID         int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	AssetID    int64  `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	Subtype    string `boil:"subtype" json:"subtype" toml:"subtype" yaml:"subtype"`
	ProviderID string `boil:"provider_id" json:"provider_id" toml:"provider_id" yaml:"provider_id"`
	Name       string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *openbosDatapointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L openbosDatapointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OpenbosDatapointColumns = struct {
	ID         string
	AssetID    string
	Subtype    string
	ProviderID string
	Name       string
}{
	ID:         "id",
	AssetID:    "asset_id",
	Subtype:    "subtype",
	ProviderID: "provider_id",
	Name:       "name",
}

var OpenbosDatapointTableColumns = struct {
	ID         string
	AssetID    string
	Subtype    string
	ProviderID string
	Name       string
}{
	ID:         "openbos_datapoint.id",
	AssetID:    "openbos_datapoint.asset_id",
	Subtype:    "openbos_datapoint.subtype",
	ProviderID: "openbos_datapoint.provider_id",
	Name:       "openbos_datapoint.name",
}

// Generated where

var OpenbosDatapointWhere = struct {
	ID         whereHelperint64
	AssetID    whereHelperint64
	Subtype    whereHelperstring
	ProviderID whereHelperstring
	Name       whereHelperstring
}{
	ID:         whereHelperint64{field: "\"open_bos\".\"openbos_datapoint\".\"id\""},
	AssetID:    whereHelperint64{field: "\"open_bos\".\"openbos_datapoint\".\"asset_id\""},
	Subtype:    whereHelperstring{field: "\"open_bos\".\"openbos_datapoint\".\"subtype\""},
	ProviderID: whereHelperstring{field: "\"open_bos\".\"openbos_datapoint\".\"provider_id\""},
	Name:       whereHelperstring{field: "\"open_bos\".\"openbos_datapoint\".\"name\""},
}

// OpenbosDatapointRels is where relationship names are stored.
var OpenbosDatapointRels = struct {
	Asset            string
	ElionaAttributes string
}{
	Asset:            "Asset",
	ElionaAttributes: "ElionaAttributes",
}

// openbosDatapointR is where relationships are stored.
type openbosDatapointR struct {
	Asset            *Asset               `boil:"Asset" json:"Asset" toml:"Asset" yaml:"Asset"`
	ElionaAttributes ElionaAttributeSlice `boil:"ElionaAttributes" json:"ElionaAttributes" toml:"ElionaAttributes" yaml:"ElionaAttributes"`
}

// NewStruct creates a new relationship struct
func (*openbosDatapointR) NewStruct() *openbosDatapointR {
	return &openbosDatapointR{}
}

func (r *openbosDatapointR) GetAsset() *Asset {
	if r == nil {
		return nil
	}
	return r.Asset
}

func (r *openbosDatapointR) GetElionaAttributes() ElionaAttributeSlice {
	if r == nil {
		return nil
	}
	return r.ElionaAttributes
}

// openbosDatapointL is where Load methods for each relationship are stored.
type openbosDatapointL struct{}

var (
	openbosDatapointAllColumns            = []string{"id", "asset_id", "subtype", "provider_id", "name"}
	openbosDatapointColumnsWithoutDefault = []string{"subtype", "provider_id", "name"}
	openbosDatapointColumnsWithDefault    = []string{"id", "asset_id"}
	openbosDatapointPrimaryKeyColumns     = []string{"id"}
	openbosDatapointGeneratedColumns      = []string{}
)

type (
	// OpenbosDatapointSlice is an alias for a slice of pointers to OpenbosDatapoint.
	// This should almost always be used instead of []OpenbosDatapoint.
	OpenbosDatapointSlice []*OpenbosDatapoint
	// OpenbosDatapointHook is the signature for custom OpenbosDatapoint hook methods
	OpenbosDatapointHook func(context.Context, boil.ContextExecutor, *OpenbosDatapoint) error

	openbosDatapointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	openbosDatapointType                 = reflect.TypeOf(&OpenbosDatapoint{})
	openbosDatapointMapping              = queries.MakeStructMapping(openbosDatapointType)
	openbosDatapointPrimaryKeyMapping, _ = queries.BindMapping(openbosDatapointType, openbosDatapointMapping, openbosDatapointPrimaryKeyColumns)
	openbosDatapointInsertCacheMut       sync.RWMutex
	openbosDatapointInsertCache          = make(map[string]insertCache)
	openbosDatapointUpdateCacheMut       sync.RWMutex
	openbosDatapointUpdateCache          = make(map[string]updateCache)
	openbosDatapointUpsertCacheMut       sync.RWMutex
	openbosDatapointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var openbosDatapointAfterSelectMu sync.Mutex
var openbosDatapointAfterSelectHooks []OpenbosDatapointHook

var openbosDatapointBeforeInsertMu sync.Mutex
var openbosDatapointBeforeInsertHooks []OpenbosDatapointHook
var openbosDatapointAfterInsertMu sync.Mutex
var openbosDatapointAfterInsertHooks []OpenbosDatapointHook

var openbosDatapointBeforeUpdateMu sync.Mutex
var openbosDatapointBeforeUpdateHooks []OpenbosDatapointHook
var openbosDatapointAfterUpdateMu sync.Mutex
var openbosDatapointAfterUpdateHooks []OpenbosDatapointHook

var openbosDatapointBeforeDeleteMu sync.Mutex
var openbosDatapointBeforeDeleteHooks []OpenbosDatapointHook
var openbosDatapointAfterDeleteMu sync.Mutex
var openbosDatapointAfterDeleteHooks []OpenbosDatapointHook

var openbosDatapointBeforeUpsertMu sync.Mutex
var openbosDatapointBeforeUpsertHooks []OpenbosDatapointHook
var openbosDatapointAfterUpsertMu sync.Mutex
var openbosDatapointAfterUpsertHooks []OpenbosDatapointHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OpenbosDatapoint) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OpenbosDatapoint) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OpenbosDatapoint) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OpenbosDatapoint) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OpenbosDatapoint) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OpenbosDatapoint) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OpenbosDatapoint) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OpenbosDatapoint) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OpenbosDatapoint) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range openbosDatapointAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOpenbosDatapointHook registers your hook function for all future operations.
func AddOpenbosDatapointHook(hookPoint boil.HookPoint, openbosDatapointHook OpenbosDatapointHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		openbosDatapointAfterSelectMu.Lock()
		openbosDatapointAfterSelectHooks = append(openbosDatapointAfterSelectHooks, openbosDatapointHook)
		openbosDatapointAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		openbosDatapointBeforeInsertMu.Lock()
		openbosDatapointBeforeInsertHooks = append(openbosDatapointBeforeInsertHooks, openbosDatapointHook)
		openbosDatapointBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		openbosDatapointAfterInsertMu.Lock()
		openbosDatapointAfterInsertHooks = append(openbosDatapointAfterInsertHooks, openbosDatapointHook)
		openbosDatapointAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		openbosDatapointBeforeUpdateMu.Lock()
		openbosDatapointBeforeUpdateHooks = append(openbosDatapointBeforeUpdateHooks, openbosDatapointHook)
		openbosDatapointBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		openbosDatapointAfterUpdateMu.Lock()
		openbosDatapointAfterUpdateHooks = append(openbosDatapointAfterUpdateHooks, openbosDatapointHook)
		openbosDatapointAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		openbosDatapointBeforeDeleteMu.Lock()
		openbosDatapointBeforeDeleteHooks = append(openbosDatapointBeforeDeleteHooks, openbosDatapointHook)
		openbosDatapointBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		openbosDatapointAfterDeleteMu.Lock()
		openbosDatapointAfterDeleteHooks = append(openbosDatapointAfterDeleteHooks, openbosDatapointHook)
		openbosDatapointAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		openbosDatapointBeforeUpsertMu.Lock()
		openbosDatapointBeforeUpsertHooks = append(openbosDatapointBeforeUpsertHooks, openbosDatapointHook)
		openbosDatapointBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		openbosDatapointAfterUpsertMu.Lock()
		openbosDatapointAfterUpsertHooks = append(openbosDatapointAfterUpsertHooks, openbosDatapointHook)
		openbosDatapointAfterUpsertMu.Unlock()
	}
}

// OneG returns a single openbosDatapoint record from the query using the global executor.
func (q openbosDatapointQuery) OneG(ctx context.Context) (*OpenbosDatapoint, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single openbosDatapoint record from the query.
func (q openbosDatapointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OpenbosDatapoint, error) {
	o := &OpenbosDatapoint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbgen: failed to execute a one query for openbos_datapoint")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OpenbosDatapoint records from the query using the global executor.
func (q openbosDatapointQuery) AllG(ctx context.Context) (OpenbosDatapointSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OpenbosDatapoint records from the query.
func (q openbosDatapointQuery) All(ctx context.Context, exec boil.ContextExecutor) (OpenbosDatapointSlice, error) {
	var o []*OpenbosDatapoint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbgen: failed to assign all query results to OpenbosDatapoint slice")
	}

	if len(openbosDatapointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OpenbosDatapoint records in the query using the global executor
func (q openbosDatapointQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OpenbosDatapoint records in the query.
func (q openbosDatapointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to count openbos_datapoint rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q openbosDatapointQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q openbosDatapointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbgen: failed to check if openbos_datapoint exists")
	}

	return count > 0, nil
}

// Asset pointed to by the foreign key.
func (o *OpenbosDatapoint) Asset(mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssetID),
	}

	queryMods = append(queryMods, mods...)

	return Assets(queryMods...)
}

// ElionaAttributes retrieves all the eliona_attribute's ElionaAttributes with an executor.
func (o *OpenbosDatapoint) ElionaAttributes(mods ...qm.QueryMod) elionaAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"open_bos\".\"eliona_attribute\".\"openbos_datapoint_id\"=?", o.ID),
	)

	return ElionaAttributes(queryMods...)
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (openbosDatapointL) LoadAsset(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOpenbosDatapoint interface{}, mods queries.Applicator) error {
	var slice []*OpenbosDatapoint
	var object *OpenbosDatapoint

	if singular {
		var ok bool
		object, ok = maybeOpenbosDatapoint.(*OpenbosDatapoint)
		if !ok {
			object = new(OpenbosDatapoint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOpenbosDatapoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOpenbosDatapoint))
			}
		}
	} else {
		s, ok := maybeOpenbosDatapoint.(*[]*OpenbosDatapoint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOpenbosDatapoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOpenbosDatapoint))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &openbosDatapointR{}
		}
		args[object.AssetID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &openbosDatapointR{}
			}

			args[obj.AssetID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`open_bos.asset`),
		qm.WhereIn(`open_bos.asset.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for asset")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Asset = foreign
		if foreign.R == nil {
			foreign.R = &assetR{}
		}
		foreign.R.OpenbosDatapoints = append(foreign.R.OpenbosDatapoints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssetID == foreign.ID {
				local.R.Asset = foreign
				if foreign.R == nil {
					foreign.R = &assetR{}
				}
				foreign.R.OpenbosDatapoints = append(foreign.R.OpenbosDatapoints, local)
				break
			}
		}
	}

	return nil
}

// LoadElionaAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (openbosDatapointL) LoadElionaAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOpenbosDatapoint interface{}, mods queries.Applicator) error {
	var slice []*OpenbosDatapoint
	var object *OpenbosDatapoint

	if singular {
		var ok bool
		object, ok = maybeOpenbosDatapoint.(*OpenbosDatapoint)
		if !ok {
			object = new(OpenbosDatapoint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOpenbosDatapoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOpenbosDatapoint))
			}
		}
	} else {
		s, ok := maybeOpenbosDatapoint.(*[]*OpenbosDatapoint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOpenbosDatapoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOpenbosDatapoint))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &openbosDatapointR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &openbosDatapointR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`open_bos.eliona_attribute`),
		qm.WhereIn(`open_bos.eliona_attribute.openbos_datapoint_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load eliona_attribute")
	}

	var resultSlice []*ElionaAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice eliona_attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on eliona_attribute")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for eliona_attribute")
	}

	if len(elionaAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ElionaAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &elionaAttributeR{}
			}
			foreign.R.OpenbosDatapoint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OpenbosDatapointID {
				local.R.ElionaAttributes = append(local.R.ElionaAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &elionaAttributeR{}
				}
				foreign.R.OpenbosDatapoint = local
				break
			}
		}
	}

	return nil
}

// SetAssetG of the openbosDatapoint to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.OpenbosDatapoints.
// Uses the global database handle.
func (o *OpenbosDatapoint) SetAssetG(ctx context.Context, insert bool, related *Asset) error {
	return o.SetAsset(ctx, boil.GetContextDB(), insert, related)
}

// SetAsset of the openbosDatapoint to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.OpenbosDatapoints.
func (o *OpenbosDatapoint) SetAsset(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"open_bos\".\"openbos_datapoint\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asset_id"}),
		strmangle.WhereClause("\"", "\"", 2, openbosDatapointPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssetID = related.ID
	if o.R == nil {
		o.R = &openbosDatapointR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &assetR{
			OpenbosDatapoints: OpenbosDatapointSlice{o},
		}
	} else {
		related.R.OpenbosDatapoints = append(related.R.OpenbosDatapoints, o)
	}

	return nil
}

// AddElionaAttributesG adds the given related objects to the existing relationships
// of the openbos_datapoint, optionally inserting them as new records.
// Appends related to o.R.ElionaAttributes.
// Sets related.R.OpenbosDatapoint appropriately.
// Uses the global database handle.
func (o *OpenbosDatapoint) AddElionaAttributesG(ctx context.Context, insert bool, related ...*ElionaAttribute) error {
	return o.AddElionaAttributes(ctx, boil.GetContextDB(), insert, related...)
}

// AddElionaAttributes adds the given related objects to the existing relationships
// of the openbos_datapoint, optionally inserting them as new records.
// Appends related to o.R.ElionaAttributes.
// Sets related.R.OpenbosDatapoint appropriately.
func (o *OpenbosDatapoint) AddElionaAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ElionaAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OpenbosDatapointID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"open_bos\".\"eliona_attribute\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"openbos_datapoint_id"}),
				strmangle.WhereClause("\"", "\"", 2, elionaAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OpenbosDatapointID = o.ID
		}
	}

	if o.R == nil {
		o.R = &openbosDatapointR{
			ElionaAttributes: related,
		}
	} else {
		o.R.ElionaAttributes = append(o.R.ElionaAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &elionaAttributeR{
				OpenbosDatapoint: o,
			}
		} else {
			rel.R.OpenbosDatapoint = o
		}
	}
	return nil
}

// OpenbosDatapoints retrieves all the records using an executor.
func OpenbosDatapoints(mods ...qm.QueryMod) openbosDatapointQuery {
	mods = append(mods, qm.From("\"open_bos\".\"openbos_datapoint\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"open_bos\".\"openbos_datapoint\".*"})
	}

	return openbosDatapointQuery{q}
}

// FindOpenbosDatapointG retrieves a single record by ID.
func FindOpenbosDatapointG(ctx context.Context, iD int64, selectCols ...string) (*OpenbosDatapoint, error) {
	return FindOpenbosDatapoint(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOpenbosDatapoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOpenbosDatapoint(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OpenbosDatapoint, error) {
	openbosDatapointObj := &OpenbosDatapoint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"open_bos\".\"openbos_datapoint\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, openbosDatapointObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbgen: unable to select from openbos_datapoint")
	}

	if err = openbosDatapointObj.doAfterSelectHooks(ctx, exec); err != nil {
		return openbosDatapointObj, err
	}

	return openbosDatapointObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OpenbosDatapoint) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OpenbosDatapoint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbgen: no openbos_datapoint provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(openbosDatapointColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	openbosDatapointInsertCacheMut.RLock()
	cache, cached := openbosDatapointInsertCache[key]
	openbosDatapointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			openbosDatapointAllColumns,
			openbosDatapointColumnsWithDefault,
			openbosDatapointColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(openbosDatapointType, openbosDatapointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(openbosDatapointType, openbosDatapointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"open_bos\".\"openbos_datapoint\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"open_bos\".\"openbos_datapoint\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbgen: unable to insert into openbos_datapoint")
	}

	if !cached {
		openbosDatapointInsertCacheMut.Lock()
		openbosDatapointInsertCache[key] = cache
		openbosDatapointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single OpenbosDatapoint record using the global executor.
// See Update for more documentation.
func (o *OpenbosDatapoint) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OpenbosDatapoint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OpenbosDatapoint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	openbosDatapointUpdateCacheMut.RLock()
	cache, cached := openbosDatapointUpdateCache[key]
	openbosDatapointUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			openbosDatapointAllColumns,
			openbosDatapointPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbgen: unable to update openbos_datapoint, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"open_bos\".\"openbos_datapoint\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, openbosDatapointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(openbosDatapointType, openbosDatapointMapping, append(wl, openbosDatapointPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update openbos_datapoint row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by update for openbos_datapoint")
	}

	if !cached {
		openbosDatapointUpdateCacheMut.Lock()
		openbosDatapointUpdateCache[key] = cache
		openbosDatapointUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q openbosDatapointQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q openbosDatapointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update all for openbos_datapoint")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to retrieve rows affected for openbos_datapoint")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OpenbosDatapointSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OpenbosDatapointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbgen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), openbosDatapointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"open_bos\".\"openbos_datapoint\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, openbosDatapointPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update all in openbosDatapoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to retrieve rows affected all in update all openbosDatapoint")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OpenbosDatapoint) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OpenbosDatapoint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbgen: no openbos_datapoint provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(openbosDatapointColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	openbosDatapointUpsertCacheMut.RLock()
	cache, cached := openbosDatapointUpsertCache[key]
	openbosDatapointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			openbosDatapointAllColumns,
			openbosDatapointColumnsWithDefault,
			openbosDatapointColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			openbosDatapointAllColumns,
			openbosDatapointPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbgen: unable to upsert openbos_datapoint, could not build update column list")
		}

		ret := strmangle.SetComplement(openbosDatapointAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(openbosDatapointPrimaryKeyColumns) == 0 {
				return errors.New("dbgen: unable to upsert openbos_datapoint, could not build conflict column list")
			}

			conflict = make([]string, len(openbosDatapointPrimaryKeyColumns))
			copy(conflict, openbosDatapointPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"open_bos\".\"openbos_datapoint\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(openbosDatapointType, openbosDatapointMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(openbosDatapointType, openbosDatapointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbgen: unable to upsert openbos_datapoint")
	}

	if !cached {
		openbosDatapointUpsertCacheMut.Lock()
		openbosDatapointUpsertCache[key] = cache
		openbosDatapointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single OpenbosDatapoint record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OpenbosDatapoint) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OpenbosDatapoint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OpenbosDatapoint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbgen: no OpenbosDatapoint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), openbosDatapointPrimaryKeyMapping)
	sql := "DELETE FROM \"open_bos\".\"openbos_datapoint\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete from openbos_datapoint")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by delete for openbos_datapoint")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q openbosDatapointQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q openbosDatapointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbgen: no openbosDatapointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete all from openbos_datapoint")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by deleteall for openbos_datapoint")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OpenbosDatapointSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OpenbosDatapointSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(openbosDatapointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), openbosDatapointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"open_bos\".\"openbos_datapoint\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, openbosDatapointPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete all from openbosDatapoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by deleteall for openbos_datapoint")
	}

	if len(openbosDatapointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OpenbosDatapoint) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbgen: no OpenbosDatapoint provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OpenbosDatapoint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOpenbosDatapoint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OpenbosDatapointSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbgen: empty OpenbosDatapointSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OpenbosDatapointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OpenbosDatapointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), openbosDatapointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"open_bos\".\"openbos_datapoint\".* FROM \"open_bos\".\"openbos_datapoint\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, openbosDatapointPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbgen: unable to reload all in OpenbosDatapointSlice")
	}

	*o = slice

	return nil
}

// OpenbosDatapointExistsG checks if the OpenbosDatapoint row exists.
func OpenbosDatapointExistsG(ctx context.Context, iD int64) (bool, error) {
	return OpenbosDatapointExists(ctx, boil.GetContextDB(), iD)
}

// OpenbosDatapointExists checks if the OpenbosDatapoint row exists.
func OpenbosDatapointExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"open_bos\".\"openbos_datapoint\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbgen: unable to check if openbos_datapoint exists")
	}

	return exists, nil
}

// Exists checks if the OpenbosDatapoint row exists.
func (o *OpenbosDatapoint) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OpenbosDatapointExists(ctx, exec, o.ID)
}
