// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbgen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ElionaAttribute is an object representing the database table.
type ElionaAttribute struct {
	ID                  int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	OpenbosDatapointID  int64  `boil:"openbos_datapoint_id" json:"openbos_datapoint_id" toml:"openbos_datapoint_id" yaml:"openbos_datapoint_id"`
	ElionaAttributeName string `boil:"eliona_attribute_name" json:"eliona_attribute_name" toml:"eliona_attribute_name" yaml:"eliona_attribute_name"`

	R *elionaAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L elionaAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ElionaAttributeColumns = struct {
	ID                  string
	OpenbosDatapointID  string
	ElionaAttributeName string
}{
	ID:                  "id",
	OpenbosDatapointID:  "openbos_datapoint_id",
	ElionaAttributeName: "eliona_attribute_name",
}

var ElionaAttributeTableColumns = struct {
	ID                  string
	OpenbosDatapointID  string
	ElionaAttributeName string
}{
	ID:                  "eliona_attribute.id",
	OpenbosDatapointID:  "eliona_attribute.openbos_datapoint_id",
	ElionaAttributeName: "eliona_attribute.eliona_attribute_name",
}

// Generated where

var ElionaAttributeWhere = struct {
	ID                  whereHelperint64
	OpenbosDatapointID  whereHelperint64
	ElionaAttributeName whereHelperstring
}{
	ID:                  whereHelperint64{field: "\"open_bos\".\"eliona_attribute\".\"id\""},
	OpenbosDatapointID:  whereHelperint64{field: "\"open_bos\".\"eliona_attribute\".\"openbos_datapoint_id\""},
	ElionaAttributeName: whereHelperstring{field: "\"open_bos\".\"eliona_attribute\".\"eliona_attribute_name\""},
}

// ElionaAttributeRels is where relationship names are stored.
var ElionaAttributeRels = struct {
	OpenbosDatapoint string
	Alarms           string
}{
	OpenbosDatapoint: "OpenbosDatapoint",
	Alarms:           "Alarms",
}

// elionaAttributeR is where relationships are stored.
type elionaAttributeR struct {
	OpenbosDatapoint *OpenbosDatapoint `boil:"OpenbosDatapoint" json:"OpenbosDatapoint" toml:"OpenbosDatapoint" yaml:"OpenbosDatapoint"`
	Alarms           AlarmSlice        `boil:"Alarms" json:"Alarms" toml:"Alarms" yaml:"Alarms"`
}

// NewStruct creates a new relationship struct
func (*elionaAttributeR) NewStruct() *elionaAttributeR {
	return &elionaAttributeR{}
}

func (r *elionaAttributeR) GetOpenbosDatapoint() *OpenbosDatapoint {
	if r == nil {
		return nil
	}
	return r.OpenbosDatapoint
}

func (r *elionaAttributeR) GetAlarms() AlarmSlice {
	if r == nil {
		return nil
	}
	return r.Alarms
}

// elionaAttributeL is where Load methods for each relationship are stored.
type elionaAttributeL struct{}

var (
	elionaAttributeAllColumns            = []string{"id", "openbos_datapoint_id", "eliona_attribute_name"}
	elionaAttributeColumnsWithoutDefault = []string{"eliona_attribute_name"}
	elionaAttributeColumnsWithDefault    = []string{"id", "openbos_datapoint_id"}
	elionaAttributePrimaryKeyColumns     = []string{"id"}
	elionaAttributeGeneratedColumns      = []string{}
)

type (
	// ElionaAttributeSlice is an alias for a slice of pointers to ElionaAttribute.
	// This should almost always be used instead of []ElionaAttribute.
	ElionaAttributeSlice []*ElionaAttribute
	// ElionaAttributeHook is the signature for custom ElionaAttribute hook methods
	ElionaAttributeHook func(context.Context, boil.ContextExecutor, *ElionaAttribute) error

	elionaAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	elionaAttributeType                 = reflect.TypeOf(&ElionaAttribute{})
	elionaAttributeMapping              = queries.MakeStructMapping(elionaAttributeType)
	elionaAttributePrimaryKeyMapping, _ = queries.BindMapping(elionaAttributeType, elionaAttributeMapping, elionaAttributePrimaryKeyColumns)
	elionaAttributeInsertCacheMut       sync.RWMutex
	elionaAttributeInsertCache          = make(map[string]insertCache)
	elionaAttributeUpdateCacheMut       sync.RWMutex
	elionaAttributeUpdateCache          = make(map[string]updateCache)
	elionaAttributeUpsertCacheMut       sync.RWMutex
	elionaAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var elionaAttributeAfterSelectMu sync.Mutex
var elionaAttributeAfterSelectHooks []ElionaAttributeHook

var elionaAttributeBeforeInsertMu sync.Mutex
var elionaAttributeBeforeInsertHooks []ElionaAttributeHook
var elionaAttributeAfterInsertMu sync.Mutex
var elionaAttributeAfterInsertHooks []ElionaAttributeHook

var elionaAttributeBeforeUpdateMu sync.Mutex
var elionaAttributeBeforeUpdateHooks []ElionaAttributeHook
var elionaAttributeAfterUpdateMu sync.Mutex
var elionaAttributeAfterUpdateHooks []ElionaAttributeHook

var elionaAttributeBeforeDeleteMu sync.Mutex
var elionaAttributeBeforeDeleteHooks []ElionaAttributeHook
var elionaAttributeAfterDeleteMu sync.Mutex
var elionaAttributeAfterDeleteHooks []ElionaAttributeHook

var elionaAttributeBeforeUpsertMu sync.Mutex
var elionaAttributeBeforeUpsertHooks []ElionaAttributeHook
var elionaAttributeAfterUpsertMu sync.Mutex
var elionaAttributeAfterUpsertHooks []ElionaAttributeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ElionaAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ElionaAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ElionaAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ElionaAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ElionaAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ElionaAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ElionaAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ElionaAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ElionaAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range elionaAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddElionaAttributeHook registers your hook function for all future operations.
func AddElionaAttributeHook(hookPoint boil.HookPoint, elionaAttributeHook ElionaAttributeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		elionaAttributeAfterSelectMu.Lock()
		elionaAttributeAfterSelectHooks = append(elionaAttributeAfterSelectHooks, elionaAttributeHook)
		elionaAttributeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		elionaAttributeBeforeInsertMu.Lock()
		elionaAttributeBeforeInsertHooks = append(elionaAttributeBeforeInsertHooks, elionaAttributeHook)
		elionaAttributeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		elionaAttributeAfterInsertMu.Lock()
		elionaAttributeAfterInsertHooks = append(elionaAttributeAfterInsertHooks, elionaAttributeHook)
		elionaAttributeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		elionaAttributeBeforeUpdateMu.Lock()
		elionaAttributeBeforeUpdateHooks = append(elionaAttributeBeforeUpdateHooks, elionaAttributeHook)
		elionaAttributeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		elionaAttributeAfterUpdateMu.Lock()
		elionaAttributeAfterUpdateHooks = append(elionaAttributeAfterUpdateHooks, elionaAttributeHook)
		elionaAttributeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		elionaAttributeBeforeDeleteMu.Lock()
		elionaAttributeBeforeDeleteHooks = append(elionaAttributeBeforeDeleteHooks, elionaAttributeHook)
		elionaAttributeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		elionaAttributeAfterDeleteMu.Lock()
		elionaAttributeAfterDeleteHooks = append(elionaAttributeAfterDeleteHooks, elionaAttributeHook)
		elionaAttributeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		elionaAttributeBeforeUpsertMu.Lock()
		elionaAttributeBeforeUpsertHooks = append(elionaAttributeBeforeUpsertHooks, elionaAttributeHook)
		elionaAttributeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		elionaAttributeAfterUpsertMu.Lock()
		elionaAttributeAfterUpsertHooks = append(elionaAttributeAfterUpsertHooks, elionaAttributeHook)
		elionaAttributeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single elionaAttribute record from the query using the global executor.
func (q elionaAttributeQuery) OneG(ctx context.Context) (*ElionaAttribute, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single elionaAttribute record from the query.
func (q elionaAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ElionaAttribute, error) {
	o := &ElionaAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbgen: failed to execute a one query for eliona_attribute")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ElionaAttribute records from the query using the global executor.
func (q elionaAttributeQuery) AllG(ctx context.Context) (ElionaAttributeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ElionaAttribute records from the query.
func (q elionaAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ElionaAttributeSlice, error) {
	var o []*ElionaAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbgen: failed to assign all query results to ElionaAttribute slice")
	}

	if len(elionaAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ElionaAttribute records in the query using the global executor
func (q elionaAttributeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ElionaAttribute records in the query.
func (q elionaAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to count eliona_attribute rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q elionaAttributeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q elionaAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbgen: failed to check if eliona_attribute exists")
	}

	return count > 0, nil
}

// OpenbosDatapoint pointed to by the foreign key.
func (o *ElionaAttribute) OpenbosDatapoint(mods ...qm.QueryMod) openbosDatapointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OpenbosDatapointID),
	}

	queryMods = append(queryMods, mods...)

	return OpenbosDatapoints(queryMods...)
}

// Alarms retrieves all the alarm's Alarms with an executor.
func (o *ElionaAttribute) Alarms(mods ...qm.QueryMod) alarmQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"open_bos\".\"alarm\".\"eliona_attribute_id\"=?", o.ID),
	)

	return Alarms(queryMods...)
}

// LoadOpenbosDatapoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (elionaAttributeL) LoadOpenbosDatapoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeElionaAttribute interface{}, mods queries.Applicator) error {
	var slice []*ElionaAttribute
	var object *ElionaAttribute

	if singular {
		var ok bool
		object, ok = maybeElionaAttribute.(*ElionaAttribute)
		if !ok {
			object = new(ElionaAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeElionaAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeElionaAttribute))
			}
		}
	} else {
		s, ok := maybeElionaAttribute.(*[]*ElionaAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeElionaAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeElionaAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &elionaAttributeR{}
		}
		args[object.OpenbosDatapointID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &elionaAttributeR{}
			}

			args[obj.OpenbosDatapointID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`open_bos.openbos_datapoint`),
		qm.WhereIn(`open_bos.openbos_datapoint.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OpenbosDatapoint")
	}

	var resultSlice []*OpenbosDatapoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OpenbosDatapoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for openbos_datapoint")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for openbos_datapoint")
	}

	if len(openbosDatapointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OpenbosDatapoint = foreign
		if foreign.R == nil {
			foreign.R = &openbosDatapointR{}
		}
		foreign.R.ElionaAttributes = append(foreign.R.ElionaAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OpenbosDatapointID == foreign.ID {
				local.R.OpenbosDatapoint = foreign
				if foreign.R == nil {
					foreign.R = &openbosDatapointR{}
				}
				foreign.R.ElionaAttributes = append(foreign.R.ElionaAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAlarms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (elionaAttributeL) LoadAlarms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeElionaAttribute interface{}, mods queries.Applicator) error {
	var slice []*ElionaAttribute
	var object *ElionaAttribute

	if singular {
		var ok bool
		object, ok = maybeElionaAttribute.(*ElionaAttribute)
		if !ok {
			object = new(ElionaAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeElionaAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeElionaAttribute))
			}
		}
	} else {
		s, ok := maybeElionaAttribute.(*[]*ElionaAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeElionaAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeElionaAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &elionaAttributeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &elionaAttributeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`open_bos.alarm`),
		qm.WhereIn(`open_bos.alarm.eliona_attribute_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load alarm")
	}

	var resultSlice []*Alarm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice alarm")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on alarm")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for alarm")
	}

	if len(alarmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Alarms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &alarmR{}
			}
			foreign.R.ElionaAttribute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ElionaAttributeID {
				local.R.Alarms = append(local.R.Alarms, foreign)
				if foreign.R == nil {
					foreign.R = &alarmR{}
				}
				foreign.R.ElionaAttribute = local
				break
			}
		}
	}

	return nil
}

// SetOpenbosDatapointG of the elionaAttribute to the related item.
// Sets o.R.OpenbosDatapoint to related.
// Adds o to related.R.ElionaAttributes.
// Uses the global database handle.
func (o *ElionaAttribute) SetOpenbosDatapointG(ctx context.Context, insert bool, related *OpenbosDatapoint) error {
	return o.SetOpenbosDatapoint(ctx, boil.GetContextDB(), insert, related)
}

// SetOpenbosDatapoint of the elionaAttribute to the related item.
// Sets o.R.OpenbosDatapoint to related.
// Adds o to related.R.ElionaAttributes.
func (o *ElionaAttribute) SetOpenbosDatapoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OpenbosDatapoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"open_bos\".\"eliona_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"openbos_datapoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, elionaAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OpenbosDatapointID = related.ID
	if o.R == nil {
		o.R = &elionaAttributeR{
			OpenbosDatapoint: related,
		}
	} else {
		o.R.OpenbosDatapoint = related
	}

	if related.R == nil {
		related.R = &openbosDatapointR{
			ElionaAttributes: ElionaAttributeSlice{o},
		}
	} else {
		related.R.ElionaAttributes = append(related.R.ElionaAttributes, o)
	}

	return nil
}

// AddAlarmsG adds the given related objects to the existing relationships
// of the eliona_attribute, optionally inserting them as new records.
// Appends related to o.R.Alarms.
// Sets related.R.ElionaAttribute appropriately.
// Uses the global database handle.
func (o *ElionaAttribute) AddAlarmsG(ctx context.Context, insert bool, related ...*Alarm) error {
	return o.AddAlarms(ctx, boil.GetContextDB(), insert, related...)
}

// AddAlarms adds the given related objects to the existing relationships
// of the eliona_attribute, optionally inserting them as new records.
// Appends related to o.R.Alarms.
// Sets related.R.ElionaAttribute appropriately.
func (o *ElionaAttribute) AddAlarms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Alarm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ElionaAttributeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"open_bos\".\"alarm\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"eliona_attribute_id"}),
				strmangle.WhereClause("\"", "\"", 2, alarmPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ElionaAttributeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &elionaAttributeR{
			Alarms: related,
		}
	} else {
		o.R.Alarms = append(o.R.Alarms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &alarmR{
				ElionaAttribute: o,
			}
		} else {
			rel.R.ElionaAttribute = o
		}
	}
	return nil
}

// ElionaAttributes retrieves all the records using an executor.
func ElionaAttributes(mods ...qm.QueryMod) elionaAttributeQuery {
	mods = append(mods, qm.From("\"open_bos\".\"eliona_attribute\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"open_bos\".\"eliona_attribute\".*"})
	}

	return elionaAttributeQuery{q}
}

// FindElionaAttributeG retrieves a single record by ID.
func FindElionaAttributeG(ctx context.Context, iD int64, selectCols ...string) (*ElionaAttribute, error) {
	return FindElionaAttribute(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindElionaAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindElionaAttribute(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ElionaAttribute, error) {
	elionaAttributeObj := &ElionaAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"open_bos\".\"eliona_attribute\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, elionaAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbgen: unable to select from eliona_attribute")
	}

	if err = elionaAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return elionaAttributeObj, err
	}

	return elionaAttributeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ElionaAttribute) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ElionaAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbgen: no eliona_attribute provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(elionaAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	elionaAttributeInsertCacheMut.RLock()
	cache, cached := elionaAttributeInsertCache[key]
	elionaAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			elionaAttributeAllColumns,
			elionaAttributeColumnsWithDefault,
			elionaAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(elionaAttributeType, elionaAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(elionaAttributeType, elionaAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"open_bos\".\"eliona_attribute\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"open_bos\".\"eliona_attribute\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbgen: unable to insert into eliona_attribute")
	}

	if !cached {
		elionaAttributeInsertCacheMut.Lock()
		elionaAttributeInsertCache[key] = cache
		elionaAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ElionaAttribute record using the global executor.
// See Update for more documentation.
func (o *ElionaAttribute) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ElionaAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ElionaAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	elionaAttributeUpdateCacheMut.RLock()
	cache, cached := elionaAttributeUpdateCache[key]
	elionaAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			elionaAttributeAllColumns,
			elionaAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbgen: unable to update eliona_attribute, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"open_bos\".\"eliona_attribute\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, elionaAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(elionaAttributeType, elionaAttributeMapping, append(wl, elionaAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update eliona_attribute row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by update for eliona_attribute")
	}

	if !cached {
		elionaAttributeUpdateCacheMut.Lock()
		elionaAttributeUpdateCache[key] = cache
		elionaAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q elionaAttributeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q elionaAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update all for eliona_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to retrieve rows affected for eliona_attribute")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ElionaAttributeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ElionaAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbgen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), elionaAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"open_bos\".\"eliona_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, elionaAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to update all in elionaAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to retrieve rows affected all in update all elionaAttribute")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ElionaAttribute) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ElionaAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbgen: no eliona_attribute provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(elionaAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	elionaAttributeUpsertCacheMut.RLock()
	cache, cached := elionaAttributeUpsertCache[key]
	elionaAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			elionaAttributeAllColumns,
			elionaAttributeColumnsWithDefault,
			elionaAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			elionaAttributeAllColumns,
			elionaAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbgen: unable to upsert eliona_attribute, could not build update column list")
		}

		ret := strmangle.SetComplement(elionaAttributeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(elionaAttributePrimaryKeyColumns) == 0 {
				return errors.New("dbgen: unable to upsert eliona_attribute, could not build conflict column list")
			}

			conflict = make([]string, len(elionaAttributePrimaryKeyColumns))
			copy(conflict, elionaAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"open_bos\".\"eliona_attribute\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(elionaAttributeType, elionaAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(elionaAttributeType, elionaAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbgen: unable to upsert eliona_attribute")
	}

	if !cached {
		elionaAttributeUpsertCacheMut.Lock()
		elionaAttributeUpsertCache[key] = cache
		elionaAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ElionaAttribute record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ElionaAttribute) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ElionaAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ElionaAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbgen: no ElionaAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), elionaAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"open_bos\".\"eliona_attribute\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete from eliona_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by delete for eliona_attribute")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q elionaAttributeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q elionaAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbgen: no elionaAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete all from eliona_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by deleteall for eliona_attribute")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ElionaAttributeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ElionaAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(elionaAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), elionaAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"open_bos\".\"eliona_attribute\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, elionaAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: unable to delete all from elionaAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbgen: failed to get rows affected by deleteall for eliona_attribute")
	}

	if len(elionaAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ElionaAttribute) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbgen: no ElionaAttribute provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ElionaAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindElionaAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ElionaAttributeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbgen: empty ElionaAttributeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ElionaAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ElionaAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), elionaAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"open_bos\".\"eliona_attribute\".* FROM \"open_bos\".\"eliona_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, elionaAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbgen: unable to reload all in ElionaAttributeSlice")
	}

	*o = slice

	return nil
}

// ElionaAttributeExistsG checks if the ElionaAttribute row exists.
func ElionaAttributeExistsG(ctx context.Context, iD int64) (bool, error) {
	return ElionaAttributeExists(ctx, boil.GetContextDB(), iD)
}

// ElionaAttributeExists checks if the ElionaAttribute row exists.
func ElionaAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"open_bos\".\"eliona_attribute\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbgen: unable to check if eliona_attribute exists")
	}

	return exists, nil
}

// Exists checks if the ElionaAttribute row exists.
func (o *ElionaAttribute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ElionaAttributeExists(ctx, exec, o.ID)
}
